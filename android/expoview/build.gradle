apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'de.undercouch.download'

// WHEN_VERSIONING_REMOVE_FROM_HERE
//maven repository info
group = 'host.exp.exponent'
version = '39.0.0'


//Upload android library to maven with javadoc and android sources
configurations {
  deployerJars
}

//Creating sources with comments
task androidSourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.java.srcDirs
}

//Put the androidSources and javadoc to the artifacts
artifacts {
  archives androidSourcesJar
}

uploadArchives {
  repositories {
    mavenDeployer {
      configuration = configurations.deployerJars
      repository(url: mavenLocal().url) {
        //if your repository needs authentication
        // authentication(userName: "username", password: "password")
      }
    }
  }
}
// WHEN_VERSIONING_REMOVE_TO_HERE

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

buildscript {
  repositories {
    // If you have maven { url "https://jitpack.io" } as your resolving url,
    // then Jitpack will only return the POM for the Android dependency causing the Gradle sync to fail.
    // However, when you change url to "https://www.jitpack.io", Jitpack returns POM, AAR, and sources.jar.
    // That is why we were adding www even though jitpacks docs don't say so.
    // See https://github.com/jitpack/jitpack.io/issues/4002.
    maven { url "https://www.jitpack.io" }
    mavenCentral()
    google()
    jcenter()
  }
  dependencies {
    classpath 'com.jakewharton:butterknife-gradle-plugin:10.2.1'
  }
}

repositories {
  maven { url "https://www.jitpack.io" }
  mavenCentral()
}

android {
  compileSdkVersion safeExtGet("compileSdkVersion", 30)

  compileOptions {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
  }

  defaultConfig {
    minSdkVersion safeExtGet("minSdkVersion", 21)
    targetSdkVersion safeExtGet("targetSdkVersion", 30)
    versionCode 1
    versionName "1.0"

    // WHEN_VERSIONING_REMOVE_FROM_HERE
    manifestPlaceholders = [
        'appAuthRedirectScheme': 'host.exp.exponent'
    ]
    // WHEN_VERSIONING_REMOVE_TO_HERE
    ndk {
      moduleName("reanimated")
    }
    buildConfigField("boolean", "IS_INTERNAL_BUILD", "false")
    buildConfigField("int", "EXOPACKAGE_FLAGS", "0")
  }

  // WHEN_PREPARING_REANIMATED_REMOVE_FROM_HERE
  tasks.withType(JavaCompile) {
    compileTask ->
      compileTask.dependsOn(packageNdkLibs)
  }

  configurations {
    extractHeaders
    extractJNI
  }
  // WHEN_PREPARING_REANIMATED_REMOVE_TO_HERE

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
  compileOptions {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
  }

  kotlinOptions {
    jvmTarget = '1.8'
  }
}

// WHEN_VERSIONING_REMOVE_FROM_HERE
import org.apache.tools.ant.taskdefs.condition.Os

class GenerateDynamicMacrosPlugin implements Plugin<Project> {
  @Override
  void apply(Project target) {
    target.exec {
      def configuration = target.gradle.startParameter.taskNames.any {
        it.toLowerCase().contains("release")
      } ? "release" : "debug"

      workingDir '../../tools/bin'

      if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd.exe', '/c', "expotools.js android-generate-dynamic-macros --configuration ${configuration}"
      } else {
        commandLine "./expotools.js", "android-generate-dynamic-macros", "--configuration", configuration
      }
    }
  }
}

apply plugin: GenerateDynamicMacrosPlugin

configurations.all {
  resolutionStrategy {
    force 'org.webkit:android-jsc:r245459'
  }
}

// Import gradle helpers for unimodules.
apply from: "../../node_modules/react-native-unimodules/gradle.groovy"
// WHEN_VERSIONING_REMOVE_TO_HERE

dependencies {
  api fileTree(dir: 'libs', include: ['*.jar'])
  api 'androidx.multidex:multidex:2.0.0'
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

  testImplementation 'junit:junit:4.12'


  api("com.facebook.fbjni:fbjni-java-only:0.0.3")

  // WHEN_PREPARING_REANIMATED_REMOVE_FROM_HERE

  extractHeaders("com.facebook.fbjni:fbjni:0.0.2:headers")
  extractJNI("com.facebook.fbjni:fbjni:0.0.2")

  // WHEN_PREPARING_REANIMATED_REMOVE_TO_HERE

  // WHEN_VERSIONING_REPLACE_WITH_DEPENDENCIES

  // WHEN_VERSIONING_REMOVE_FROM_HERE

  api 'org.webkit:android-jsc:r245459' // needs to be before react-native

  /* UNCOMMENT WHEN DISTRIBUTING
  api 'com.facebook.react:react-native:39.0.0'
  addUnimodulesDependencies([
      modulesPaths : ['../../packages'],
      configuration: 'compileOnly',
      target       : 'react-native',
      exclude      : [
        'expo-module-template',
        'expo-in-app-purchases',
        'expo-gl-cpp-legacy'
      ]
  ])
  compileOnly project(':expo-random')
  END UNCOMMENT WHEN DISTRIBUTING */

  // WHEN_DISTRIBUTING_REMOVE_FROM_HERE
  api project(':ReactAndroid')

  // Universal modules
  // In distribution they're "compileOnly" and it's the app/build.gradle who manages them.
  addUnimodulesDependencies([
      modulesPaths : ['../../packages'],
      configuration: 'api',
      target       : 'react-native',
      exclude      : [
          'expo-module-template',
          'expo-in-app-purchases',
      ]
  ])

  // expo-random is no longer a unimodule
  api project(':expo-random')

  // Versioned react native
  // WHEN_PREPARING_SHELL_REMOVE_FROM_HERE
  // THIS COMMENT IS USED BY android-build-aar.sh DO NOT MODIFY
  // BEGIN_SDK_40
  api 'host.exp:reactandroid-abi40_0_0:1.0.0'
  // END_SDK_40
  // BEGIN_SDK_39
  api 'host.exp:reactandroid-abi39_0_0:1.0.0'
  // END_SDK_39
  // BEGIN_SDK_38
  api 'host.exp:reactandroid-abi38_0_0:1.0.0'
  // END_SDK_38
  // WHEN_PREPARING_SHELL_REMOVE_TO_HERE
  // WHEN_VERSIONING_REMOVE_TO_HERE
  // WHEN_DISTRIBUTING_REMOVE_TO_HERE

  // React native dependencies
  api 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
  api 'com.facebook.fresco:fresco:2.0.0'
  api 'com.facebook.fresco:animated-gif:2.0.0'
  api 'com.facebook.fresco:animated-webp:2.0.0'
  api 'com.facebook.fresco:webpsupport:2.0.0'
  api 'com.facebook.fresco:imagepipeline-okhttp3:2.0.0'
  api 'com.facebook.stetho:stetho:1.3.1' // do we need this?
  api 'com.facebook.stetho:stetho-okhttp3:1.3.1' // do we need this?
  compileOnly 'com.facebook.soloader:soloader:0.8.2'
  api 'com.google.code.findbugs:jsr305:3.0.2'
  api 'com.squareup.okhttp3:okhttp:3.12.1'
  api 'com.squareup.okhttp3:okhttp-urlconnection:3.12.1'
  api 'com.squareup.okio:okio:1.15.0'
  api 'com.facebook.infer.annotation:infer-annotation:0.11.2'
  api 'javax.inject:javax.inject:1'

  // Our dependencies
  api "androidx.appcompat:appcompat:1.2.0"
  compileOnly 'org.glassfish:javax.annotation:3.1.1'
  api 'de.greenrobot:eventbus:2.4.0'
  api "androidx.room:room-runtime:2.1.0"

  api 'com.squareup.picasso:picasso:2.5.2'
  api 'com.google.android.gms:play-services-analytics:17.0.0'
  api 'com.google.android.gms:play-services-maps:17.0.0'
  api 'com.google.android.gms:play-services-auth:17.0.0'
  api 'com.google.android.gms:play-services-location:17.0.0'
  api 'com.google.android.gms:play-services-fitness:17.0.0'
  api 'com.google.android.gms:play-services-wallet:17.0.0' //may need 10.+
  debugApi 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta1'
  // debugApi 'com.squareup.leakcanary:leakcanary-android:1.4-beta1'
  releaseApi 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta1'
  api 'commons-io:commons-io:2.6'
  api 'me.leolin:ShortcutBadger:1.1.4@aar'
  api 'com.theartofdev.edmodo:android-image-cropper:2.7.0'
  api 'commons-codec:commons-codec:1.10'
  api 'net.openid:appauth:0.7.1'
  api 'com.airbnb.android:lottie:3.4.0'
  compileOnly 'io.branch.sdk.android:library:4.1.0'
  api "androidx.exifinterface:exifinterface:1.0.0"
  api "androidx.legacy:legacy-support-v4:1.0.0"
  api "androidx.browser:browser:1.0.0"

  // react-native-screens
  api 'androidx.fragment:fragment:1.2.2'
  api 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
  api 'com.google.android.material:material:1.1.0'

  api 'com.google.firebase:firebase-core:17.2.3'
  api 'com.google.firebase:firebase-messaging:20.2.4'
  api 'com.google.maps.android:android-maps-utils:0.5'
  api 'com.jakewharton:butterknife:10.2.1'
  annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'
  // Remember to update DetachAppTemplate build.gradle if you add any excludes or transitive = false here!

  // Used only in Expo Go, see Analytics.java
  compileOnly 'com.amplitude:android-sdk:2.23.2'

  // expo-file-system
  api 'com.squareup.okhttp3:okhttp:3.10.0'
  api 'com.squareup.okhttp3:okhttp-urlconnection:3.10.0'

  // expo-av
  // See explanation in expo-av/build.gradle
  api 'com.google.android.exoplayer:extension-okhttp:2.9.2'

  // expo-application
  api 'com.android.installreferrer:installreferrer:1.0'

  //dbflow
  annotationProcessor "com.github.Raizlabs.DBFlow:dbflow-processor:${safeExtGet('dbFlowVersion', '4.2.4')}"
  api "com.github.Raizlabs.DBFlow:dbflow-core:${safeExtGet('dbFlowVersion', '4.2.4')}"
  api "com.github.Raizlabs.DBFlow:dbflow:${safeExtGet('dbFlowVersion', '4.2.4')}"

  implementation 'com.cronutils:cron-utils:4.1.3'

  // @react-native-community/viewpager
  api 'com.github.troZee:ViewPager2:v1.0.6'
}


// WHEN_PREPARING_REANIMATED_REMOVE_FROM_HERE

// reanimated

import java.nio.file.Paths

import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.ReplaceTokens

def reactProperties = new Properties()
def reactNative = new File("$projectDir/../../versioned-react-native")

// WHEN_VERSIONING_REMOVE_FROM_HERE
reactNative = new File("$projectDir/..")
// WHEN_VERSIONING_REMOVE_TO_HERE

file("$reactNative/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }

def BOOST_VERSION = reactProperties.getProperty("BOOST_VERSION")
def DOUBLE_CONVERSION_VERSION = reactProperties.getProperty("DOUBLE_CONVERSION_VERSION")
def FOLLY_VERSION = reactProperties.getProperty("FOLLY_VERSION")
def GLOG_VERSION = reactProperties.getProperty("GLOG_VERSION")

// We download various C++ open-source dependencies into downloads.
// We then copy both the downloaded code and our custom makefiles and headers into third-party-ndk.
// After that we build native code from src/main/jni with module path pointing at third-party-ndk.

def downloadsDir = new File("$buildDir/downloads")
def thirdPartyNdkDir = new File("$buildDir/third-party-ndk")

def reactNativeThirdParty = new File("$reactNative/ReactAndroid/src/main/jni/third-party")

// You need to have following folders in this directory:
//   - boost_1_63_0
//   - double-conversion-1.1.6
//   - folly-deprecate-dynamic-initializer
//   - glog-0.3.5
def dependenciesPath = System.getenv("REACT_NATIVE_DEPENDENCIES")

// The Boost library is a very large download (>100MB).
// If Boost is already present on your system, define the REACT_NATIVE_BOOST_PATH env variable
// and the build will use that.
def boostPath = dependenciesPath ?: System.getenv("REACT_NATIVE_BOOST_PATH")

def follyReplaceContent = '''
  ssize_t r;
  do {
    r = open(name, flags, mode);
  } while (r == -1 && errno == EINTR);
  return r;
'''

task createNativeDepsDirectories {
  downloadsDir.mkdirs()
  thirdPartyNdkDir.mkdirs()
}

task downloadBoost(dependsOn: createNativeDepsDirectories, type: Download) {
  src("https://github.com/react-native-community/boost-for-react-native/releases/download/v${BOOST_VERSION.replace("_", ".")}-0/boost_${BOOST_VERSION}.tar.gz")
  onlyIfNewer(true)
  overwrite(false)
  dest(new File(downloadsDir, "boost_${BOOST_VERSION}.tar.gz"))
}

task prepareBoost(dependsOn: boostPath ? [] : [downloadBoost], type: Copy) {
  from(boostPath ?: tarTree(resources.gzip(downloadBoost.dest)))
  from("$reactNativeThirdParty/boost/Android.mk")
  include("Android.mk", "boost_${BOOST_VERSION}/boost/**/*.hpp", "boost/boost/**/*.hpp")
  includeEmptyDirs = false
  into("$thirdPartyNdkDir/boost")
  doLast {
    file("$thirdPartyNdkDir/boost/boost").renameTo("$thirdPartyNdkDir/boost/boost_${BOOST_VERSION}")
  }
}

task downloadDoubleConversion(dependsOn: createNativeDepsDirectories, type: Download) {
  src("https://github.com/google/double-conversion/archive/v${DOUBLE_CONVERSION_VERSION}.tar.gz")
  onlyIfNewer(true)
  overwrite(false)
  dest(new File(downloadsDir, "double-conversion-${DOUBLE_CONVERSION_VERSION}.tar.gz"))
}

task prepareDoubleConversion(dependsOn: dependenciesPath ? [] : [downloadDoubleConversion], type: Copy) {
  from(dependenciesPath ?: tarTree(downloadDoubleConversion.dest))
  from("$reactNativeThirdParty/double-conversion/Android.mk")
  include("double-conversion-${DOUBLE_CONVERSION_VERSION}/src/**/*", "Android.mk")
  filesMatching("*/src/**/*", { fname -> fname.path = "double-conversion/${fname.name}" })
  includeEmptyDirs = false
  into("$thirdPartyNdkDir/double-conversion")
}

task downloadFolly(dependsOn: createNativeDepsDirectories, type: Download) {
  src("https://github.com/facebook/folly/archive/v${FOLLY_VERSION}.tar.gz")
  onlyIfNewer(true)
  overwrite(false)
  dest(new File(downloadsDir, "folly-${FOLLY_VERSION}.tar.gz"))
}

task prepareFolly(dependsOn: dependenciesPath ? [] : [downloadFolly], type: Copy) {
  from(dependenciesPath ?: tarTree(downloadFolly.dest))
  from("$reactNativeThirdParty/folly/Android.mk")
  include("folly-${FOLLY_VERSION}/folly/**/*", "Android.mk")
  eachFile { fname -> fname.path = (fname.path - "folly-${FOLLY_VERSION}/") }
  // Fixes problem with Folly failing to build on certain systems. See
  // https://github.com/software-mansion/react-native-reanimated/issues/1024
  filter { line -> line.replaceAll('return int\\(wrapNoInt\\(open, name, flags, mode\\)\\);', follyReplaceContent) }
  includeEmptyDirs = false
  into("$thirdPartyNdkDir/folly")
}

task downloadGlog(dependsOn: createNativeDepsDirectories, type: Download) {
  src("https://github.com/google/glog/archive/v${GLOG_VERSION}.tar.gz")
  onlyIfNewer(true)
  overwrite(false)
  dest(new File(downloadsDir, "glog-${GLOG_VERSION}.tar.gz"))
}

// Prepare glog sources to be compiled, this task will perform steps that normally should've been
// executed by automake. This way we can avoid dependencies on make/automake
task prepareGlog(dependsOn: dependenciesPath ? [] : [downloadGlog], type: Copy) {
  from(dependenciesPath ?: tarTree(downloadGlog.dest))
  from("$reactNativeThirdParty/glog/")
  include("glog-${GLOG_VERSION}/src/**/*", "Android.mk", "config.h")
  includeEmptyDirs = false
  filesMatching("**/*.h.in") {
    filter(ReplaceTokens, tokens: [
        ac_cv_have_unistd_h           : "1",
        ac_cv_have_stdint_h           : "1",
        ac_cv_have_systypes_h         : "1",
        ac_cv_have_inttypes_h         : "1",
        ac_cv_have_libgflags          : "0",
        ac_google_start_namespace     : "namespace google {",
        ac_cv_have_uint16_t           : "1",
        ac_cv_have_u_int16_t          : "1",
        ac_cv_have___uint16           : "0",
        ac_google_end_namespace       : "}",
        ac_cv_have___builtin_expect   : "1",
        ac_google_namespace           : "google",
        ac_cv___attribute___noinline  : "__attribute__ ((noinline))",
        ac_cv___attribute___noreturn  : "__attribute__ ((noreturn))",
        ac_cv___attribute___printf_4_5: "__attribute__((__format__ (__printf__, 4, 5)))"
    ])
    it.path = (it.name - ".in")
  }
  into("$thirdPartyNdkDir/glog")

  doLast {
    copy {
      from(fileTree(dir: "$thirdPartyNdkDir/glog", includes: ["stl_logging.h", "logging.h", "raw_logging.h", "vlog_is_on.h", "**/src/glog/log_severity.h"]).files)
      includeEmptyDirs = false
      into("$thirdPartyNdkDir/glog/exported/glog")
    }
  }
}

task downloadNdkBuildDependencies {
  if (!boostPath) {
    dependsOn(downloadBoost)
  }
  dependsOn(downloadDoubleConversion)
  dependsOn(downloadFolly)
  dependsOn(downloadGlog)
}

/**
 * Finds the path of the installed npm package with the given name using Node's
 * module resolution algorithm, which searches "node_modules" directories up to
 * the file system root. This handles various cases, including:
 *
 *   - Working in the open-source RN repo:
 *       Gradle: /path/to/react-native/ReactAndroid
 *       Node module: /path/to/react-native/node_modules/[package]
 *
 *   - Installing RN as a dependency of an app and searching for hoisted
 *     dependencies:
 *       Gradle: /path/to/app/node_modules/react-native/ReactAndroid
 *       Node module: /path/to/app/node_modules/[package]
 *
 *   - Working in a larger repo (e.g., Facebook) that contains RN:
 *       Gradle: /path/to/repo/path/to/react-native/ReactAndroid
 *       Node module: /path/to/repo/node_modules/[package]
 *
 * The search begins at the given base directory (a File object). The returned
 * path is a string.
 */
def findNodeModulePath(baseDir, packageName) {
  def basePath = baseDir.toPath().normalize()
  // Node's module resolution algorithm searches up to the root directory,
  // after which the base path will be null
  while (basePath) {
    def candidatePath = Paths.get(basePath.toString(), "node_modules", packageName)
    if (candidatePath.toFile().exists()) {
      return candidatePath.toString()
    }
    basePath = basePath.getParent()
  }
  return null
}

def getNdkBuildName() {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    return "ndk-build.cmd"
  } else {
    return "ndk-build"
  }
}

def findNdkBuildFullPath() {
  // we allow to provide full path to ndk-build tool
  if (hasProperty("ndk.command")) {
    return property("ndk.command")
  }
  // or just a path to the containing directory
  if (hasProperty("ndk.path")) {
    def ndkDir = property("ndk.path")
    return new File(ndkDir, getNdkBuildName()).getAbsolutePath()
  }

  if (System.getenv("ANDROID_NDK_HOME") != null) {
    def ndkDir = System.getenv("ANDROID_NDK_HOME")
    return new File(ndkDir, getNdkBuildName()).getAbsolutePath()
  }

  // Left for the legacy reasons, use the previous one.
  if (System.getenv("ANDROID_NDK") != null) {
    def ndkDir = System.getenv("ANDROID_NDK")
    return new File(ndkDir, getNdkBuildName()).getAbsolutePath()
  }

  try {
    def ndkDir = android.ndkDirectory.absolutePath
    if (ndkDir) {
      return new File(ndkDir, getNdkBuildName()).getAbsolutePath()
    }
  } catch (InvalidUserDataException e) {
    throw new GradleScriptException(
        "Default side-by-side NDK installation is not found.\n" +
        "Set \$ANDROID_NDK_HOME environment variable correctly or setup ndk.dir in local.properties.", e
    )
  }

  return null
}

def getNdkBuildFullPath() {
  def ndkBuildFullPath = findNdkBuildFullPath()
  if (ndkBuildFullPath == null) {
    throw new GradleScriptException(
        "ndk-build binary cannot be found, check if you've set " +
            "\$ANDROID_NDK_HOME environment variable correctly or if ndk.dir is " +
            "setup in local.properties",
        null)
  }
  if (!new File(ndkBuildFullPath).canExecute()) {
    throw new GradleScriptException(
        "ndk-build binary " + ndkBuildFullPath + " doesn't exist or isn't executable.\n" +
            "Check that the \$ANDROID_NDK_HOME environment variable, or ndk.dir in local.properties, is set correctly.\n" +
            "(On Windows, make sure you escape backslashes in local.properties or use forward slashes, e.g. C:\\\\ndk or C:/ndk rather than C:\\ndk)",
        null)
  }
  return ndkBuildFullPath
}

task prepareHermes() {
  def hermesPackagePath = findNodeModulePath(projectDir, "hermes-engine")
  if (!hermesPackagePath) {
    throw new GradleScriptException("Could not find the hermes-engine npm package", null)
  }

  def hermesAAR = file("$hermesPackagePath/android/hermes-debug.aar")
  if (!hermesAAR.exists()) {
    throw new GradleScriptException("The hermes-engine npm package is missing \"android/hermes-debug.aar\"", null)
  }

  def soFiles = zipTree(hermesAAR).matching({ it.include "**/*.so" })

  copy {
    from soFiles
    from "$reactNative/ReactAndroid/src/main/jni/first-party/hermes/Android.mk"
    into "$thirdPartyNdkDir/hermes"
  }
}

// Create Android.mk library module based on jsc from npm
task prepareJSC {
  doLast {
    def jscPackagePath = findNodeModulePath(projectDir, "jsc-android")
    if (!jscPackagePath) {
      throw new GradleScriptException("Could not find the jsc-android npm package", null)
    }

    def jscDist = file("$jscPackagePath/dist")
    if (!jscDist.exists()) {
      throw new GradleScriptException("The jsc-android npm package is missing its \"dist\" directory", null)
    }

    def jscAAR = fileTree(jscDist).matching({ it.include "**/android-jsc/**/*.aar" }).singleFile
    def soFiles = zipTree(jscAAR).matching({ it.include "**/*.so" })

    def headerFiles = fileTree(jscDist).matching({ it.include "**/include/*.h" })

    copy {
      from(soFiles)
      from(headerFiles)
      from("$reactNative/ReactAndroid/src/main/jni/third-party/jsc/Android.mk")

      filesMatching("**/*.h", { it.path = "JavaScriptCore/${it.name}" })

      includeEmptyDirs(false)
      into("$thirdPartyNdkDir/jsc")
    }
  }
}

task extractAARHeaders {
  doLast {
    configurations.extractHeaders.files.each {
      def file = it.absoluteFile
      def packageName = file.name.tokenize('-')[0]
      copy {
        from zipTree(file)
        into "$reactNative/ReactAndroid/src/main/jni/first-party/$packageName/headers"
        include "**/*.h"
      }
    }
  }
}

task extractJNIFiles {
  doLast {
    configurations.extractJNI.files.each {
      def file = it.absoluteFile
      def packageName = file.name.tokenize('-')[0]
      copy {
        from zipTree(file)
        into "$reactNative/ReactAndroid/src/main/jni/first-party/$packageName/"
        include "jni/**/*"
      }
    }
  }
}

task buildReanimated(dependsOn: [prepareJSC, prepareBoost, prepareDoubleConversion, prepareFolly, prepareGlog, prepareHermes, extractAARHeaders, extractJNIFiles], type: Exec) {
  inputs.dir("src/main/JNI")
  inputs.dir("src/main/cpp")
  inputs.dir("src/main/Common")
  outputs.dir("$buildDir/reanimated-ndk/all")
  commandLine(getNdkBuildFullPath(),
      "NDK_PROJECT_PATH=null",
      "NDK_APPLICATION_MK=$projectDir/src/main/JNI/Application.mk",
      "NDK_OUT=" + temporaryDir,
      "NDK_LIBS_OUT=$buildDir/reanimated-ndk/all",
      "THIRD_PARTY_NDK_DIR=$buildDir/third-party-ndk",
      "JSI_PATH=$reactNative/ReactCommon/jsi",
      "REACT_COMMON_DIR=$reactNative/ReactCommon",
      "REACT_SRC_DIR=$reactNative/ReactAndroid/src/main/java/com/facebook/react",
      "FIRST_PARTY=$reactNativeThirdParty/../first-party",
      "REACT_NATIVE_JNI=$reactNative/ReactAndroid/src/main/jni/react/jni",
      "REACT_NATIVE_REACT=$reactNative/ReactAndroid/src/main/jni/react",
      "-C", file("src/main/JNI").absolutePath,
      "--jobs", project.findProperty("jobs") ?: Runtime.runtime.availableProcessors()
  )
}


task cleanNdkLibs(type: Exec) {
  ignoreExitValue(true)
  errorOutput(new ByteArrayOutputStream())
  commandLine(getNdkBuildFullPath(),
      "THIRD_PARTY_NDK_DIR=$buildDir/third-party-ndk",
      "-C", file("src/main/JNI").absolutePath,
      "clean")
  doLast {
    def aar_path = "$buildDir/outputs/aar";
    file(aar_path).delete()
    println("Deleted aar output dir at ${file(aar_path)}")
  }
}

task packageNdkLibs(dependsOn: buildReanimated, type: Copy) {
  from("$buildDir/reanimated-ndk/all")
  include("**/lib*reanimated*.so")
  include("**/lib*turbomodulejsijni*.so")
  into("$projectDir/src/main/jniLibs")
}

// WHEN_PREPARING_REANIMATED_REMOVE_TO_HERE
